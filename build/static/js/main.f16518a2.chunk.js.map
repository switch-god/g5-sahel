{"version":3,"sources":["logo.svg","app/Posts.js","redux/actions/postActions.js","app/Users.js","app/About.js","app/Home.js","App.js","redux/reducers/postReducer.js","redux/reducers/index.js","redux/store/index.js","serviceWorker.js","index.js"],"names":["module","exports","Posts","this","props","fetchPosts","console","log","posts","postsItems","map","post","key","id","title","rendered","Button","variant","Component","connect","state","postR","items","dispatch","axios","get","then","type","payload","data","catch","error","Users","About","Home","App","to","path","initialState","item","postReducer","action","combineReducers","middleware","thunk","store","createStore","rootReducer","applyMiddleware","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oIAAAA,EAAOC,QAAU,IAA0B,kC,mMCIrCC,E,kLAGEC,KAAKC,MAAMC,e,+BAGXC,QAAQC,IAAIJ,KAAKC,MAAMI,OAEvB,IAAMC,EAAaN,KAAKC,MAAMI,MAAME,KAAI,SAACC,GAAD,OACpC,yBAAKC,IAAKD,EAAKE,IACb,4BAAKF,EAAKE,IACV,4BAAKF,EAAKG,MAAMC,UAChB,kBAACC,EAAA,EAAD,CAAQC,QAAQ,WAAhB,eAIN,OACI,6BACKR,O,GAlBGS,aA6BLC,eAJS,SAAAC,GAAK,MAAK,CAC9BZ,MAAQY,EAAMC,MAAMC,SAGe,CAAEjB,WC9Bf,WACtB,OAAO,SAACkB,GACJC,IAAMC,IAAI,yDACTC,MAAK,SAAAlB,GACJe,EAAS,CACLI,KAAO,cACPC,QAAUpB,EAAMqB,UAGrBC,OAAM,SAAAC,GACLzB,QAAQC,IAAI,oCDoBPY,CAAwCjB,GE/BlC8B,E,uKAEb,OACI,6C,GAHuBd,aCAde,E,uKAEb,OACI,6C,GAHuBf,aCAdgB,E,uKAEb,OACI,2C,GAHsBhB,aCoEnBiB,EAnDf,uKAGI,OACE,kBAAC,IAAD,KACE,6BAGE,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,YAON,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,cAtCd,GAAyBnB,a,uBCnBnBoB,EAAe,CACjBhB,MAAQ,GACRiB,KAAO,IAmBIC,EAhBK,WAAmC,IAAlCpB,EAAiC,uDAAzBkB,EAAcG,EAAW,uCAClD,OAAOA,EAAOd,MACV,IAAK,cACD,OAAO,eACAP,EADP,CAEIE,MAAQmB,EAAOb,UAIvB,QACI,OAAOR,ICXJsB,cAAgB,CAC3BrB,MAAQmB,ICGNG,EAAa,CAACC,KAILC,EAFDC,YAAYC,EANL,GAM8BC,IAAe,WAAf,EAAmBL,ICElDM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUX,MAAOA,GACf,kBAAC,EAAD,QAGJY,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,MAAK,SAAAoC,GACjCA,EAAaC,kB","file":"static/js/main.f16518a2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.8dad8028.svg\";","import React, { Component } from 'react'\nimport {connect} from 'react-redux';\nimport { fetchPosts } from '../redux/actions/postActions';\nimport { Button } from 'react-bootstrap';\nclass Posts extends Component {\n    \n    componentDidMount(){\n        this.props.fetchPosts();\n    }\n    render() {\n        console.log(this.props.posts);\n\n        const postsItems = this.props.posts.map((post) => (\n            <div key={post.id}>\n              <h3>{post.id}</h3>\n              <h3>{post.title.rendered}</h3>\n              <Button variant=\"primary\">Primary</Button>\n              {/* <p>{post.body}</p>  */}\n            </div>\n          ));\n        return (\n            <div>\n                {postsItems}\n            </div>\n        )\n    }\n\n}\n\nconst mapStateToProps = state => ({\n    posts : state.postR.items,\n});\n\nexport default connect(mapStateToProps,{ fetchPosts })(Posts);\n","// Fetching APi's :\nimport axios from 'axios';\n\nexport const fetchPosts = () => {\n    return (dispatch) => {\n        axios.get(\"https://g5sahel.switch.tn/backend/wp-json/wp/v2/posts\")\n        .then(posts => {\n          dispatch({\n              type : 'FETCH_POSTS',\n              payload : posts.data,\n          });\n        })\n        .catch(error => {\n          console.log(\"erreur axios app component\");\n        });\n    }\n};\n\nexport const searchPosts = () => {\n    return (dispatch) => {\n        \n    }\n}","import React, { Component } from 'react'\n\nexport default class Users extends Component {\n    render() {\n        return (\n            <div>\n                USERRRSS\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class About extends Component {\n    render() {\n        return (\n            <div>\n                ABOUUUUT\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class Home extends Component {\n    render() {\n        return (\n            <div>\n                HOMMME\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\nimport './App.css';\r\n\r\n\r\n/* APP COMPONENTS */ \r\nimport Posts from './app/Posts';\r\nimport Users from './app/Users';\r\nimport About from './app/About';\r\nimport Home from './app/Home';\r\n\r\nexport class App extends Component {\r\n  \r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div>\r\n          \r\n          {/* NAVBAR */}\r\n          <nav>\r\n            <ul>\r\n              <li>\r\n                <Link to=\"/\">Home</Link>\r\n              </li>\r\n              <li>\r\n                <Link to=\"/about\">About</Link>\r\n              </li>\r\n              <li>\r\n                <Link to=\"/users\">Users</Link>\r\n              </li>\r\n              <li>\r\n                <Link to=\"/posts\">Posts</Link>\r\n              </li>\r\n            </ul>\r\n          </nav>\r\n          {/* ./NAVBAR */}\r\n\r\n          {/* A <Switch> looks through its children <Route>s and renders the first one that matches the current URL.*/}\r\n          <Switch>\r\n            <Route path=\"/posts\">\r\n              <Posts />\r\n            </Route>\r\n            <Route path=\"/users\">\r\n              <Users />\r\n            </Route>\r\n            <Route path=\"/about\">\r\n              <About />\r\n            </Route>\r\n            <Route path=\"/\">\r\n              <Home />\r\n            </Route>\r\n          </Switch>\r\n\r\n          {/* FOOTER */}\r\n          {/* ./FOOTER */}\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","const initialState = {\n    items : [],\n    item : {},\n};\n\nconst postReducer = (state = initialState, action) => {\n    switch(action.type) {\n        case 'FETCH_POSTS' : \n            return {\n                ...state,\n                items : action.payload,\n            }\n        // case 'ADD_POSTS' :\n\n        default : \n            return state;\n    }\n};\n\n\n\nexport default postReducer;\n","import { combineReducers } from 'redux';\nimport postReducer from './postReducer';\n\n\nexport default combineReducers({\n    postR : postReducer\n});\n","import {createStore , applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst initialState = {\n\n};\n\nconst middleware = [thunk];\n\nconst store = createStore(rootReducer,initialState,applyMiddleware(...middleware));\n\nexport default store;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport store from './redux/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}